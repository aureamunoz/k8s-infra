version: 2.1

jobs:
  # Job installing the kubernetes-sigs/kind tool able to install a k8s cluster using docker
  kind:
    machine:
      enabled: true
      docker_layer_caching: true
    environment:
      CLUSTER_NAME: circleci
      GO_VERSION: 1.12.7
      GOPATH: /go
      KIND_VERSION: v0.4.0
      KUBECTL_VERSION: v1.14.0
      KUBEDB_VERSION: 0.12.0

    steps:
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

      - run:
          name: Install Kind
          command: |
            KIND_BINARY_URL="https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-linux-amd64"
            wget -O kind "${KIND_BINARY_URL}"
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind

      - run:
          name: Create Kind cluster
          command: |
            set -x
            kind create cluster --image=kindest/node:v1.14.3 --name $CLUSTER_NAME --loglevel=debug

      - run:
          name: Setup kubeconfig file
          command: |
            kind get kubeconfig-path --name=$CLUSTER_NAME
            mkdir -p $HOME/.kube
            cp -i $(kind get kubeconfig-path --name=$CLUSTER_NAME) $HOME/.kube/config
            sudo chown $(id -u):$(id -g) $HOME/.kube/config
            cat /home/circleci/.kube/kind-config-$CLUSTER_NAME

      - run:
          name: Check Cluster state
          command: |
            #kubectl cluster-info
            #kubectl wait -n kube-system --timeout=320s --for condition=Ready -l k8s-app=calico-node pods
            kubectl get nodes -o wide
            kubectl get pods --all-namespaces -o wide
            kubectl get services --all-namespaces -o wide

      - run:
          name: Install Helm
          command: |
            curl -LO https://git.io/get_helm.sh
            chmod 700 get_helm.sh
            ./get_helm.sh

      - run:
          name: Init Helm
          command: |
            helm init
            until kubectl get pods -n kube-system -l name=tiller | grep 1/1; do sleep 1; done
            kubectl create clusterrolebinding tiller-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default

      - run:
          name: Deploy Tekton
          command: |
            kubectl apply -f https://storage.googleapis.com/tekton-releases/previous/v0.4.0/release.yaml

      - run:
          name: Setup KubeDB
          command: |
            helm repo add appscode https://charts.appscode.com/stable/
            helm repo update
            helm install appscode/kubedb --name kubedb-operator --version ${KUBEDB_VERSION} \
              --namespace kubedb --set apiserver.enableValidatingWebhook=false,apiserver.enableMutatingWebhook=false

            TIMER=0
              until kubectl get crd elasticsearchversions.catalog.kubedb.com memcachedversions.catalog.kubedb.com mongodbversions.catalog.kubedb.com mysqlversions.catalog.kubedb.com postgresversions.catalog.kubedb.com redisversions.catalog.kubedb.com || [[ ${TIMER} -eq 60 ]]; do
                sleep 5
                TIMER=$((TIMER + 1))
              done
            helm install appscode/kubedb-catalog --name kubedb-catalog --version ${KUBEDB_VERSION} \
              --namespace kubedb --set catalog.postgres=true,catalog.elasticsearch=false,catalog.etcd=false,catalog.memcached=false,catalog.mongo=false,catalog.mysql=false,catalog.redis=false

      - run:
          name: Deploy Component Operator
          command: |
            git clone https://github.com/snowdrop/component-operator.git && cd component-operator
            kubectl create ns operators
            kubectl apply -n operators -f deploy/sa.yaml
            kubectl apply -f deploy/cluster-role.yaml
            kubectl apply -f deploy/user-rbac.yaml
            kubectl apply -f deploy/cluster-role-binding.yaml
            kubectl apply -f deploy/crds/capability_v1alpha2.yaml
            kubectl apply -f deploy/crds/component_v1alpha2.yaml
            kubectl apply -f deploy/crds/link_v1alpha2.yaml
            kubectl apply -n operators -f deploy/operator.yaml

            until kubectl get pods -n operators -l name=component-operator | grep 1/1; do sleep 1; done
            pod_id=$(kubectl get pods -n operators -l name=component-operator -o=name)
            kubectl logs $pod_id -n operators

      - run:
          name: Run e2e test in development mode
          command: |
            cd demo
            ./mvnw package
            cd ..
            ./demo/scripts/end-to-end_fruit_demo.sh 127.0.0.1 test dev

  centos:
    docker:
      - image: quay.io/snowdrop/centos-circleci:latest

    environment:
      ANSIBLE_BIN_DIR=/home/circleci/.local/bin

    steps:
      - checkout

      - run:
          name: Install k8s
          command: |
            PB_DIR=sandbox/k8s
            ansible-playbook $PB_DIR/main.yml -i $PB_DIR/circle_hosts \
                --limit circleci \
                -c local \
                --tags k8s_cluster \
                --become  \
                -e install_docker=false

  ubuntu:
    docker:
      - image: circleci/golang:latest

    environment:
      ANSIBLE_BIN_DIR=/home/circleci/.local/bin

    steps:
      - checkout

      - run:
          name: Install Ansible using pip3
          command: |
            sudo apt install -yqq python3-pip tree
            pip3 install ansible

      - run:
          name: Install k8s
          command: |
            PB_DIR=sandbox/k8s
            $ANSIBLE_BIN_DIR/ansible-playbook $PB_DIR/main.yml -i $PB_DIR/circle_hosts --limit circleci -c local --tags k8s_cluster --become

workflows:
  version: 2
  k8s-centos:
    jobs:
      - kind
      # - centos
      # k8s-ubuntu:
      #   jobs:
      #     - ubuntu

